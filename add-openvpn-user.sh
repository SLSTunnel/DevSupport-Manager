#!/bin/bash

# OpenVPN User Management Script
# Add, remove, and manage OpenVPN users

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  OpenVPN User Management${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Add new user
add_user() {
    echo ""
    echo "üë§ Add New OpenVPN User"
    echo "======================="
    
    read -p "Enter username: " USERNAME
    read -s -p "Enter password: " PASSWORD
    echo ""
    read -s -p "Confirm password: " PASSWORD2
    echo ""
    
    if [[ "$PASSWORD" != "$PASSWORD2" ]]; then
        print_error "Passwords do not match"
        return 1
    fi
    
    if [[ -z "$USERNAME" || -z "$PASSWORD" ]]; then
        print_error "Username and password cannot be empty"
        return 1
    fi
    
    # Check if user already exists
    if grep -q "^$USERNAME " /etc/openvpn/server/auth.txt; then
        print_error "User '$USERNAME' already exists"
        return 1
    fi
    
    # Add user to auth file
    echo "$USERNAME $PASSWORD" >> /etc/openvpn/server/auth.txt
    print_status "User '$USERNAME' added successfully"
    
    # Create client configuration
    create_client_config "$USERNAME"
}

# Remove user
remove_user() {
    echo ""
    echo "üóëÔ∏è  Remove OpenVPN User"
    echo "======================="
    
    read -p "Enter username to remove: " USERNAME
    
    if [[ -z "$USERNAME" ]]; then
        print_error "Username cannot be empty"
        return 1
    fi
    
    # Check if user exists
    if ! grep -q "^$USERNAME " /etc/openvpn/server/auth.txt; then
        print_error "User '$USERNAME' does not exist"
        return 1
    fi
    
    # Remove user from auth file
    sed -i "/^$USERNAME /d" /etc/openvpn/server/auth.txt
    print_status "User '$USERNAME' removed successfully"
    
    # Remove client configuration
    rm -f /etc/openvpn/client/$USERNAME.ovpn
    print_status "Client configuration removed"
}

# List users
list_users() {
    echo ""
    echo "üìã OpenVPN Users"
    echo "================"
    
    if [[ ! -f /etc/openvpn/server/auth.txt ]]; then
        print_warning "No users found"
        return
    fi
    
    echo "Username          Status"
    echo "--------          ------"
    
    while IFS=' ' read -r username password; do
        if [[ "$username" != "#"* ]]; then
            echo "$username"
        fi
    done < /etc/openvpn/server/auth.txt
}

# Create client configuration
create_client_config() {
    local USERNAME="$1"
    
    # Create client directory if it doesn't exist
    mkdir -p /etc/openvpn/client
    
    # Get server IP
    SERVER_IP=$(curl -s ifconfig.me)
    
    # Create client configuration
    cat > /etc/openvpn/client/$USERNAME.ovpn << EOF
# OpenVPN Client Configuration for $USERNAME
# Generated by DevSupport-Manager

# UDP Configuration (Port 1194)
client
dev tun
proto udp
remote $SERVER_IP 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
auth SHA256
comp-lzo
verb 3
auth-user-pass

# WebSocket Configuration (Port 443)
# Uncomment the following lines to use WebSocket
# proto tcp
# remote $SERVER_IP 443

# Proxy Configuration (Port 8080)
# Uncomment the following lines to use Proxy
# proto tcp
# remote $SERVER_IP 8080

<ca>
$(cat /etc/openvpn/server/ca.crt)
</ca>

<tls-auth>
$(cat /etc/openvpn/server/ta.key)
</tls-auth>
key-direction 1
EOF
    
    print_status "Client configuration created: /etc/openvpn/client/$USERNAME.ovpn"
}

# Change user password
change_password() {
    echo ""
    echo "üîê Change User Password"
    echo "======================="
    
    read -p "Enter username: " USERNAME
    read -s -p "Enter new password: " NEW_PASSWORD
    echo ""
    read -s -p "Confirm new password: " NEW_PASSWORD2
    echo ""
    
    if [[ "$NEW_PASSWORD" != "$NEW_PASSWORD2" ]]; then
        print_error "Passwords do not match"
        return 1
    fi
    
    if [[ -z "$USERNAME" || -z "$NEW_PASSWORD" ]]; then
        print_error "Username and password cannot be empty"
        return 1
    fi
    
    # Check if user exists
    if ! grep -q "^$USERNAME " /etc/openvpn/server/auth.txt; then
        print_error "User '$USERNAME' does not exist"
        return 1
    fi
    
    # Update password
    sed -i "s/^$USERNAME .*/$USERNAME $NEW_PASSWORD/" /etc/openvpn/server/auth.txt
    print_status "Password for user '$USERNAME' changed successfully"
}

# Show service status
show_status() {
    echo ""
    echo "üìä OpenVPN Service Status"
    echo "========================="
    
    echo "UDP Server (Port 1194):"
    systemctl status openvpn@udp --no-pager -l
    
    echo ""
    echo "WebSocket Server (Port 443):"
    systemctl status openvpn@ws --no-pager -l
    
    echo ""
    echo "Proxy Server (Port 8080):"
    systemctl status openvpn@proxy --no-pager -l
    
    echo ""
    echo "WebSocket Proxy:"
    systemctl status openvpn-ws-proxy --no-pager -l
}

# Main menu
main_menu() {
    while true; do
        print_header
        echo ""
        echo "1. üë§ Add new user"
        echo "2. üóëÔ∏è  Remove user"
        echo "3. üìã List users"
        echo "4. üîê Change password"
        echo "5. üìä Show service status"
        echo "6. üö™ Exit"
        echo ""
        
        read -p "Select option: " choice
        
        case $choice in
            1)
                add_user
                ;;
            2)
                remove_user
                ;;
            3)
                list_users
                ;;
            4)
                change_password
                ;;
            5)
                show_status
                ;;
            6)
                print_status "Goodbye!"
                exit 0
                ;;
            *)
                print_error "Invalid option"
                ;;
        esac
        
        echo ""
        read -p "Press Enter to continue..."
    done
}

# Check if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    check_root
    main_menu
fi 